#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help() {
	echo "Usage: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
	echo ""
	echo "HELP:"
	echo "\t-h/--help — vypíše nápovedu"
	echo ""
	echo "COMMANDS:"
	echo "\tinfected 	spočítá počet nakažených"
	echo "\tmerge 		sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí"
	echo "\tgender 		vypíše počet nakažených pro jednotlivá pohlaví"
	echo "\tage 		vypíše statistiku počtu nakažených osob dle věku"
	echo "\tdaily 		vypíše statistiku nakažených osob pro jednotlivé dny"
	echo "\tmonthly 	vypíše statistiku nakažených osob pro jednotlivé měsíce"
	echo "\tyearly 		vypíše statistiku nakažených osob pro jednotlivé roky"
	echo "\tcountries 	vypíše statistiku nakažených osob pro jednotlivé země nákazy"
	echo "\tdistricts 	vypíše statistiku nakažených osob pro jednotlivé okresy"
	echo "\tregions 	vypíše statistiku nakažených osob pro jednotlivé kraje"
	echo ""
	echo "FILTERS:"
	echo "\t-a DATETIME 	after: jsou uvažovány pouze záznamy PO tomto datu. DATETIME je formátu YYYY-MM-DD"
	echo "\t-b DATETIME 	before: jsou uvažovány pouze záznamy PŘED tímto datem"
	echo "\t-g GENDER	jsou uvažovány pouze záznamy nakažených osob daného pohlaví. M — muž, Z — žena"
	echo "\t-s [WIDTH]	vypisuje date ne číselně, ale graficky v podobě histogramů"
}

gender() { #DONE
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | awk -F ',' '{if ($4 == "M") genderm++; else if($4 == "Z") genderf++; else none++} END {print("M: " genderm); print("Z: " genderf); if(none > 0){print("None: " none)}}'
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | awk -F ',' -v width=100000 '{if ($4 == "M") genderm++; else if($4 == "Z") genderf++; else none++}\
			END {printf("M: ")} END {for (i=0; i < genderm/width-1; i++) printf("#") } END {print("")}\
			END {printf("Z: ")} END {for (i=0; i < genderf/width-1; i++) printf("#") } END {print("")}\
			END {if (none > 0){printf("None: "); for (i=0; i < none/width-1; i++) printf("#"); print("")}}'
	else
		echo "$READ" | awk -F ',' -v width="$WIDTH" '{if ($4 == "M") genderm++; else if ($4 == "Z") genderf++; else none++}\
		END {if (genderm > genderf){
				printf("M: ")
				for (i=1; i <= width; i++){printf("#")}
				print("")
				printf("Z: ")
				for (i=1; i < width*genderf/genderm; i++){printf("#")}
				print("")
				if (none > 0){
				printf("None: ")
				for (i=1; i < width*none/genderm; i++){printf("#")}
				print("")}}
			else{
				printf("M: ")
				for (i=1; i < width*genderm/genderf; i++){printf("#")}
				print("")
				printf("Z: ")
				for (i=1; i <= width; i++){printf("#")}
				print("")
				if (none > 0){
				printf("None: ")
				for (i=1; i < width*none/genderf; i++){printf("#")}
				print("")}}}'
	fi
}

age() { #DONE
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | sed 1d | awk -F ',' '{ if ($3 == "") none++
		else if ($3 <= 5) c5++
		else if ($3 >= 6 && $3 <= 15) c15++
		else if ($3 >= 16 && $3 <= 25) c25++
		else if ($3 >= 26 && $3 <= 35) c35++
		else if ($3 >= 36 && $3 <= 45) c45++
		else if ($3 >= 46 && $3 <= 55) c55++
		else if ($3 >= 56 && $3 <= 65) c65++
		else if ($3 >= 66 && $3 <= 75) c75++
		else if ($3 >= 76 && $3 <= 85) c85++
		else if ($3 >= 86 && $3 <= 95) c95++
		else if ($3 >= 96 && $3 <= 105) c105++
		else cmore++;}\
		END {print "0-5	: " c5; print "6-15	: " c15; print "16-25	: " c25; print "26-35	: " c35; print "36-45	: " c45; print "46-55	: " c55
		print "56-65	: " c65; print "66-75	: " c75; print "76-85	: " c85; print "86-95	: " c95; print "96-105	: " c105; print ">105	: " cmore; if (none > 0){print "None	: " none}}'
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | sed 1d | awk -F ',' -v width=10000 '{ if ($3 == "") none++
		else if ($3 <= 5) c5++
		else if ($3 >= 6 && $3 <= 15) c15++
		else if ($3 >= 16 && $3 <= 25) c25++
		else if ($3 >= 26 && $3 <= 35) c35++
		else if ($3 >= 36 && $3 <= 45) c45++
		else if ($3 >= 46 && $3 <= 55) c55++
		else if ($3 >= 56 && $3 <= 65) c65++
		else if ($3 >= 66 && $3 <= 75) c75++
		else if ($3 >= 76 && $3 <= 85) c85++
		else if ($3 >= 86 && $3 <= 95) c95++
		else if ($3 >= 96 && $3 <= 105) c105++
		else cmore++;}\
		END {printf "0-5	: "} END {for (i=0; i < c5/width-1; i++) printf("#") } END {print("")}\
		END {printf "6-15	: "} END {for (i=0; i < c15/width-1; i++) printf("#") } END {print("")}\
		END {printf "16-25	: "} END {for (i=0; i < c25/width-1; i++) printf("#") } END {print("")}\
		END {printf "26-35	: "} END {for (i=0; i < c35/width-1; i++) printf("#") } END {print("")}\
		END {printf "36-45	: "} END {for (i=0; i < c45/width-1; i++) printf("#") } END {print("")}\
		END {printf "46-55	: "} END {for (i=0; i < c55/width-1; i++) printf("#") } END {print("")}\
		END {printf "56-65	: "} END {for (i=0; i < c65/width-1; i++) printf("#") } END {print("")}\
		END {printf "66-75	: "} END {for (i=0; i < c75/width-1; i++) printf("#") } END {print("")}\
		END {printf "76-85	: "} END {for (i=0; i < c85/width-1; i++) printf("#") } END {print("")}\
		END {printf "86-95	: "} END {for (i=0; i < c95/width-1; i++) printf("#") } END {print("")}\
		END {printf "96-105	: "} END {for (i=0; i < c105/width-1; i++) printf("#") } END {print("")}\
		END {printf ">105	: "} END {for (i=0; i < cmore/width-1; i++) printf("#") } END {print("")}\
		END {if (none > 0){printf("None	: "); for (i=0; i < none/width-1; i++){printf("#")}; print("")}}'
	else
		echo "$READ" | sed 1d | awk -F ',' -v width="$WIDTH" -v max=0 '{if ($3 == "") none++
		else if ($3 <= 5) c5++
		else if ($3 >= 6 && $3 <= 15) c15++
		else if ($3 >= 16 && $3 <= 25) c25++
		else if ($3 >= 26 && $3 <= 35) c35++
		else if ($3 >= 36 && $3 <= 45) c45++
		else if ($3 >= 46 && $3 <= 55) c55++
		else if ($3 >= 56 && $3 <= 65) c65++
		else if ($3 >= 66 && $3 <= 75) c75++
		else if ($3 >= 76 && $3 <= 85) c85++
		else if ($3 >= 86 && $3 <= 95) c95++
		else if ($3 >= 96 && $3 <= 105) c105++
		else cmore++;}\
		END {	if (c5 > max){max=c5}
				if (c15 > max){max=c15}
				if (c25 > max){max=c25}
				if (c35 > max){max=c35}
				if (c45 > max){max=c45}
				if (c55 > max){max=c55}
				if (c65 > max){max=c65}
				if (c75 > max){max=c75}
				if (c85 > max){max=c85}
				if (c95 > max){max=c95}
				if (c105 > max){max=c105}
				if (cmore > max){max=cmore}
				if (none > max){max=none}}\
		END {printf "0-5	: "} END {for (i=0; i < c5*width/max; i++) printf("#") } END {print("")}\
		END {printf "6-15	: "} END {for (i=0; i < c15*width/max; i++) printf("#") } END {print("")}\
		END {printf "16-25	: "} END {for (i=0; i < c25*width/max; i++) printf("#") } END {print("")}\
		END {printf "26-35	: "} END {for (i=0; i < c35*width/max; i++) printf("#") } END {print("")}\
		END {printf "36-45	: "} END {for (i=0; i < c45*width/max; i++) printf("#") } END {print("")}\
		END {printf "46-55	: "} END {for (i=0; i < c55*width/max; i++) printf("#") } END {print("")}\
		END {printf "56-65	: "} END {for (i=0; i < c65*width/max; i++) printf("#") } END {print("")}\
		END {printf "66-75	: "} END {for (i=0; i < c75*width/max; i++) printf("#") } END {print("")}\
		END {printf "76-85	: "} END {for (i=0; i < c85*width/max; i++) printf("#") } END {print("")}\
		END {printf "86-95	: "} END {for (i=0; i < c95*width/max; i++) printf("#") } END {print("")}\
		END {printf "96-105	: "} END {for (i=0; i < c105*width/max; i++) printf("#") } END {print("")}\
		END {printf ">105	: "} END {for (i=0; i < cmore*width/max; i++) printf("#") } END {print("")}\
		END {if (none > 0){printf("None	: "); for (i=0; i < none*width/max; i++){printf("#")}; print("")}}'
	fi
}

daily() {
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | sed 1d | awk -F ',' '{day[$2]++} END {for (i in day) print(i ": " day[i])}' | sort
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | sed 1d | awk -F ',' -v width=500 '{day[$2]++}
		END {	for (i in day){
					printf(i ": ")
					for (j=1; j < int(day[i]/width); j++){printf("#")}
					print("")}}' | sort
	else
		echo "$READ" | sed 1d | awk -F ',' -v width="$WIDTH" '{max=0; day[$2]++; if (day[$2] > max){max = day[$2]}}\
		END {	for (i in day){
					printf(i ": ")
					for (j=1; j < int(width*day[i]/max); j++){printf("#")}
					print("")}}' | sort
	fi
}

monthly() {
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | sed 1d | awk -F ',' '{mon[substr($2, 1, 7)]++} END {for (i in mon) print(i ": " mon[i])}' | sort
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | sed 1d | awk -F ',' -v width=10000 '{mon[substr($2, 1, 7)]++}
		END {	for (i in mon){
					printf(i ": ")
					for (j=1; j < int(mon[i]/width); j++){printf("#")}
					print("")}}' | sort
	else
		echo "$READ" | sed 1d | awk -F ',' -v width="$WIDTH" '{max=0; mon[substr($2, 1, 7)]++; if (mon[substr($2, 1, 7)] > max){max = mon[substr($2, 1, 7)]}}\
		END {	for (i in mon){
					printf(i ": ")
					for (j=1; j < int(width*mon[i]/max)-1; j++){printf("#")}
					print("")}}' | sort
	fi
}

yearly() {
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | sed 1d | awk -F ',' '{yr[substr($2, 1, 4)]++} END {for (i in yr) print(i ": " yr[i])}' | sort
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | sed 1d | awk -F ',' -v width=100000 '{yr[substr($2, 1, 4)]++}
		END {	for (i in yr){
					printf(i ": ")
					for (j=1; j < int(yr[i]/width); j++){printf("#")}
					print("")}}' | sort
	else #NOT SURE IF THIS WORKS
		echo "$READ" | sed 1d | awk -F ',' -v width="$WIDTH" '{max=0; yr[substr($2, 1, 4)]++; if (yr[substr($2, 1, 4)] > max){max = yr[substr($2, 1, 4)]}}\
		END {	for (i in yr){
					printf(i ": ")
					for (j=1; j < int(width*yr[i]/max)-1; j++){printf("#")}
					print("")}}' | sort
	fi
}

countries() {
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | sed 1d | awk -F ',' '{country[$8]++} END {for (i in country){if (i == ""){continue}; print(i ": " country[i])}}' | sort
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | sed 1d | awk -F ',' -v width=100 '{country[$8]++}
		END {	for (i in country){
					if (i == ""){continue}
					printf(i ": ")
					for (j=1; j < int(country[i]/width); j++){printf("#")}
					print("")}}' | sort
	else #TODO: fix
		echo "$READ" | sed 1d | awk -F ',' -v width="$WIDTH" '{max=0; country[$8]++; if (country[$8] != "" && country[$8] > max){max = country[$8]}}\
		END {	for (i in country){
					printf(i ": ")
					for (j=1; j < int(width*country[i]/max); j++){printf("#")}
					print("")}}' | sort
	fi
}

districts() {
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | sed 1d | awk -F ',' '{district[$6]++} END {for (i in district){if (i == ""){continue}; print(i ": " district[i])}}' | sort
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | sed 1d | awk -F ',' -v width=1000 '{district[$6]++}
		END {	for (i in district){
					if (i == ""){continue}
					printf(i ": ")
					for (j=1; j < int(district[i]/width); j++){printf("#")}
					print("")}}' | sort
	else #TODO: fix
		echo "$READ" | sed 1d | awk -F ',' -v width="$WIDTH" '{max=0; district[$6]++; if (district[$6] != "" && district[$6] > max){max = district[$6]}}\
		END {	for (i in district){
					printf(i ": ")
					for (j=1; j < int(width*district[i]/max); j++){printf("#")}
					print("")}}' | sort
	fi
}

regions() {
	if [ "$WIDTH" = "0" ]; then
		echo "$READ" | sed 1d | awk -F ',' '{region[$5]++} END {for (i in region){if (i == ""){continue}; print(i ": " region[i])}}' | sort
	elif [ "$WIDTH" = "1" ]; then
		echo "$READ" | sed 1d | awk -F ',' -v width=10000 '{region[$5]++}
		END {	for (i in region){
					if (i == ""){continue}
					printf(i ": ")
					for (j=1; j < int(region[i]/width); j++){printf("#")}
					print("")}}' | sort
	else #TODO: fix
		echo "$READ" | sed 1d | awk -F ',' -v width="$WIDTH" '{max=0; region[$5]++; if (region[$5] != "" && region[$5] > max){max = region[$5]}}\
		END {	for (i in region){
					printf(i ": ")
					for (j=1; j < int(width*region[i]/max); j++){printf("#")}
					print("")}}' | sort
	fi
}

validation(){
	sed 1d |awk -F ',' '{if (($3 < 0 || $3 !~ "^[[:space:]]*[0-9]*[[:space:]]*+$") && length($3) != 0){print "Invalid age: " $0 > "/dev/stderr"}
				 		 else{print $0}}'
	sed 1d | awk -F ',' '{	if (($2 !~ "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$") && length($2) != 0){print "Invalid date: " $0 > "/dev/stderr"}
						   	else{print $0}}' #TODO: fix regex for invalid dates
}

COMMAND=""
AFTER="0000-00-00"
BEFORE="9999-99-99"
GENDER=""
WIDTH="0"
LOG=""
GZ_LOG=""
BZ_LOG=""

while [ "$#" -gt 0 ]; do
	case "$1" in
	-h | --help)
		print_help
		shift
		;;
	-a)
		if [[ "$2" =~ ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$ ]]; then
			AFTER="$2"
			shift
			shift
		else
			echo "Invalid date in after filter. Please use corona -h for help."
			exit 1
		fi
		;;
	-b)
		if [[ "$2" =~ ^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$ ]]; then
			BEFORE="$2"
			shift
			shift
		else
			echo "Invalid date in before filter. Please use corona -h for help."
			exit 1
		fi
		;;
	-g)
		if [ "$2" = "M" ] || [ "$2" = "Z" ]; then
			GENDER="$2"
			shift
			shift
		else
			echo "Invalid gender filter. Please use corona -h for help."
			exit 1
		fi
		;;
	-s)
		OPTARG="$2"
		if [[ $OPTARG =~ ^[0-9]+$ ]]; then
   			WIDTH="$2"
			shift
			shift
		else
			WIDTH="1"
			shift
		fi
		;;
	-*)
		echo "Invalid filter. Please use corona -h for help."	
		exit 1
		;;
	infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions)
		COMMAND="$1"
		shift
		;;
	*.csv)
		LOG="$1 $LOG"
		shift
		;;	
	*.gz)
		GZ_LOG="$1 $GZ_LOG"
		shift
		;;
	*.bz2)
		BZ_LOG="$1 $BZ_LOG"
		shift
		;;
	*)
		echo "Invalid command. Please use corona -h for help."
		exit 1
		;;	
	esac
done

if [ "$LOG" = "" ] && [ "$GZ_LOG" = "" ] && [ "$BZ_LOG" = "" ]; then
	READ="$(cat - | validation)"
elif [ "$LOG" != "" ] && [ "$GZ_LOG" = "" ] && [ "$BZ_LOG" = "" ]; then
	READ="$(cat $LOG | validation)"
elif [ "$GZ_LOG" != "" ] && [ "$BZ_LOG" = "" ]; then
	READ="$(gzip -d -c $GZ_LOG | cat $LOG | validation)"
elif [ "$BZ_LOG" != "" ]; then
	READ="$(bzip2 -d -c $BZ_LOG | gzip -d -c $GZ_LOG | cat $LOG | validation)"
fi

#FILTERS
if [ -n "$GENDER" ]; then
	READ=$(echo "$READ" | awk -F ',' -v gender="$GENDER" '{if ($4 == gender || length($4) == 0) print}')
elif [ "$AFTER" != "0000-00-00" ]; then
	READ=$(echo "$READ" | awk -F ',' -v after="$AFTER" '{if ($2 >= after || length($2) == 0) print}')
elif [ "$BEFORE" != "9999-99-99" ]; then
	READ=$(echo "$READ" | awk -F ',' -v before="$BEFORE" '{if ($2 <= before || length($2) == 0) print}')
fi

#COMMANDS
if [ "$COMMAND" = "infected" ]; then
	echo "$READ" | sed 1d | awk 'END {print NR}'
	exit 0
elif [ "$COMMAND" = "gender" ]; then
	gender
	exit 0
elif [ "$COMMAND" = "age" ]; then
	age
	exit 0
elif [ "$COMMAND" = "daily" ]; then
	daily
	exit 0
elif [ "$COMMAND" = "monthly" ]; then
	monthly
	exit 0
elif [ "$COMMAND" = "yearly" ]; then
	yearly
	exit 0
elif [ "$COMMAND" = "countries" ]; then
	countries
	exit 0
elif [ "$COMMAND" = "districts" ]; then
	districts
	exit 0
elif [ "$COMMAND" = "regions" ]; then
	regions
	exit 0
elif [ "$COMMAND" = "" ] || [ "$COMMAND" = "merge" ]; then
	echo "id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
	echo "$READ" | sed 1d
	exit 0
fi